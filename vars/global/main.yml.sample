# Set the cluster name. A real DNS name is good.
cluster_name: mapr.example.com

# MCS webserver. Leave this alone unless you have special needs.
mapr_webserver: https://{{groups["webserver"][0]}}:8443

# set the admin username. This is usually
# mapr, and probably does not need to be changed
# in most environments.
mapr_admin_username: mapr

# MapR user Password, sha1 crypted (see ansible-vault if you wish to encrypt this file)
# generate the hash with "openssl passwd -1"
mapr_user_pw: $1$98q6OUnc$2/PJybdtQk5Nk7.SLoAdv1

# The username to use when authenticating to a secure cluster
maprlogin_username: '{{mapr_admin_username}}'

# Password in clear text (see ansible-vault if you wish to encrypt this file)
# This is used with maprlogin. If you change this to a valuable password,
# you REALLY should encrypt this file!
maprlogin_pw_clear: mapr

# set the host from which you want to download MapR packages.
# This will be used to set up your yum repo.
mirror_host: package.mapr.com

# Choose the MapR version you want.
# Be sure to include the 'v'.
mapr_version: v5.0.0

# Optionally provide a license key file here.
license_file: /var/lib/jenkins/jobs/latest_m7_license/workspace/LatestDemoLicense-M7.txt

# Configure security, or not. Do it!
secure_cluster: True

# disks to use on each node. The default below is for a d2.xlarge
# instance, which provides two instance store volumes.
mapr_disks: [ "/dev/xvdf","/dev/xvdg", "/dev/xvdh", "/dev/xvdi", "/dev/xvdj", "/dev/xvdk" ]


# Default NTP servers are below. Uncomment and override these defaults
# as needed, particularly if you don't have internet access.
#ntp_config_server:
#  - 0.pool.ntp.org
#  - 1.pool.ntp.org
#  - 2.pool.ntp.org
#  - 3.pool.ntp.org
ntp_config_server:
  - 172.16.1.58


# Choose your ecosystem components. Note that you need to choose the
# version and build based on what's available in MapR packages.
# You should also be careful to observe the compatibility of components
# as these playbooks make no attempt to validate compatibility.
# OpenTSDB, Solr and Kafka are not packaged by MapR.

# YARN and/or classic MapReduce
yarn_enabled:  True
classic_enabled: False

# Apache Hive
hive_enabled: True
hive_version: "1.2"
hive_build: "201511180952"
# MySQL credentials for hivemeta, hue
# Password is in clear text (see ansible-vault if you wish to encrypt this file)
mysql_root_user: root
mysql_root_password: mapr


# Apache Pig
pig_enabled: False
pig_version: 0.14
pig_build: 201509021826-1

# Apache Spark
spark_enabled: True
spark_version: 1.5.2
spark_build: 201512161339-1

# OpenTSDB
opentsdb_enabled: True

# Apache Solr
solr_enabled: False
solr_version: 4.10.3

# Apache HBase
hbase_enabled: False
hbase_version: 0.98.12
hbase_build: 201507081709-1

drill_enabled: True
drill_version: 1.4.0
drill_build: "201601071151-1"

impala_enabled: False

# Apache Oozie
oozie_enabled: False
oozie_version: 4.2.0
oozie_build: 201511171640-1

# HTTPFS
httpfs_enabled: False
httpfs_version: 1.0
httpfs_build: 201505061449-1

# Hue
hue_enabled: True
hue_version: 3.9.0
hue_build: 201511191616-1

# Apache Kafka
kafka_enabled: False
kafka_version: "0.9.0.0"

# ec2_regions is a dictionary with some fairly self-explanatory variables.
# Be sure to change the security groups, vpc-subnet and image. Image should
# not need changing unless you are changing the region.

ec2_regions:
  east-1a:
    region: us-east-1
    zone: us-east-1a
    keypair: vgonzalez_keypair
    # How many nodes to request per region.
    cluster_node_type: d2.2xlarge
    cluster_node_count: 5
    # If the node_price variables are set, ansible will request a spot instance.
    cluster_node_price: .35
    # Create ephemeral volumes. Example below is for d2.xlarge, which provides
    # three 2TB volumes. The data will be lost when the node is terminated or
    # stopped.
    # Do not specify a size, or you will get an EBS volume.
    cluster_node_volumes:
      - device_name: /dev/xvdf
        ephemeral: ephemeral0
      - device_name: /dev/xvdg
        ephemeral: ephemeral1
      - device_name: /dev/xvdh
        ephemeral: ephemeral2
      - device_name: /dev/xvdi
        ephemeral: ephemeral3
      - device_name: /dev/xvdj
        ephemeral: ephemeral4
      - device_name: /dev/xvdk
        ephemeral: ephemeral5
    # Create EBS volumes. Example below is for creating a 20GB volume that
    # could be mounted on /opt/mapr, and a 72GB volume to be used for MFS.
    #cluster_node_volumes:
    #  - device_name: /dev/xvdb
    #    volume_size: 20
    #    delete_on_termination: true
    #  - device_name: /dev/xvdf
    #    volume_size: 36
    #    delete_on_termination: true
    #  - device_name: /dev/xvdg
    #    volume_size: 36
    #    delete_on_termination: true
    edge_node_type: m4.xlarge
    # If the node_price variables are set, ansible will request a spot instance.
    edge_node_price:
    edge_node_count: 1
    edge_node_price:
    # Create EBS volumes. Example below is for creating a 20GB volume that
    # could be mounted on /opt/mapr, and a 72GB volume to be used for MFS.
    edge_node_volumes:
      - device_name: /dev/xvdb
        volume_size: 20
        delete_on_termination: true
    # If the node_price variables are set, ansible will request a spot instance.
    spot_wait_timeout: 900
    security_group:
      - ssh-only
      - vpc-internal
    vpc_subnet: subnet-8f999ba7
    image: ami-1ecae776 # Amazon Linux HVM, us-east-1
    assign_public_ip: no
    instance_tags:
      Name: '{{cluster_name}}'
    placement_group: vgonzalez

# Set up your HTTP proxy, if needed.
proxy_env:
  http_proxy: http://172.16.1.58:3128
  https_proxy: http://172.16.1.58:3128

# Skip the tests, if you dare.
skip_tests: False
