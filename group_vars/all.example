# Validation options

# Perform write test to raw device.
destructive_tests_ok: False

# Install MapR installer (incompatible with install playbooks)
install_mapr_installer: False

# Set the cluster name. A real DNS name is good.
cluster_name: mapr.example.com

# MCS webserver. Leave this alone unless you have special needs.
mapr_webserver: https://{{groups["webserver"][0]}}:8443

# set the admin username. This is usually
# mapr, and probably does not need to be changed
# in most environments.
mapr_admin_username: mapr
mapr_uid: 2000
mapr_gid: 2000

# MapR user Password, sha1 crypted (see ansible-vault if you wish to encrypt this file)
# generate the hash with "openssl passwd -1"
mapr_user_pw: $1$98q6OUnc$2/PJybdtQk5Nk7.SLoAdv1

# The username to use when authenticating to a secure cluster
maprlogin_username: '{{mapr_admin_username}}'

# Password in clear text (see ansible-vault if you wish to encrypt this file)
# This is used with maprlogin. If you change this to a valuable password,
# you REALLY should encrypt this file!
maprlogin_pw_clear: mapr

# set the host from which you want to download MapR packages.
# This will be used to set up your yum repo.
# mirror_host: mapr-partner.s3.amazonaws.com
mirror_host: package.mapr.com

# Choose the MapR version you want.
# Be sure to include the 'v'.
mapr_version: v5.1.0

# Optionally provide a license key file here.
license_file:

# Configure security, or not. Do it!
secure_cluster: True

# disks to use on each node. The default below is for a d2.xlarge
# instance, which provides no instance store volumes. Volumes are
# specified below, with the region information.
mapr_disks: [ "/dev/xvdf","/dev/xvdg" ]

# Default NTP servers are below. Uncomment and override these defaults
# as needed, particularly if you don't have internet access.
ntp_config_server:
  - 0.pool.ntp.org
  - 1.pool.ntp.org
  - 2.pool.ntp.org
  - 3.pool.ntp.org
#ntp_config_server:
#  - 172.16.1.58

timezone: "America/New_York"

# Choose your ecosystem components. Note that you need to choose the
# version and build based on what's available in MapR packages.
# You should also be careful to observe the compatibility of components
# as these playbooks make no attempt to validate compatibility.
# Solr and Kafka are not packaged by MapR.

# NFS server
nfs_enabled: False

# posix
posix_client_enabled: True
posix_client_fuse_enabled: True
posix_ticketfile: /tmp/maprticket_{{mapr_uid}}
posix_client_edition: basic

# Mesos and Myriad
mesos_enabled: True
mesos_dns_resolvers: '[ "172.16.0.2" ]'

# Apache Myriad
myriad_enabled: True
myriad_version: "0.1"
myriad_build: "*"
myriad_frameworks:
  framework1:
    name: framework1
    rm_name: framework1-rm

# YARN and/or classic MapReduce
yarn_enabled: True
classic_enabled: False

# Apache Hive
hive_enabled: True
hive_version: "1.2"
hive_build: "*"
# MySQL credentials for hivemeta, hue
# Password is in clear text (see ansible-vault if you wish to encrypt this file)
mysql_root_user: root
mysql_root_password: mapr

# Apache Pig
pig_enabled: True
pig_version: 0.15
pig_build: "*"

# Apache Spark
spark_enabled: True
spark_version: 1.6.1
spark_build: "*"

# OpenTSDB
opentsdb_enabled: True

# Apache Solr
solr_enabled: False
solr_version: 4.10.3

# Apache HBase
hbase_enabled: False
hbase_version: 1.1.1
hbase_build: "*"

drill_enabled: True
drill_version: 1.6.0
drill_build: "*"

impala_enabled: False

# Apache Oozie
oozie_enabled: False
oozie_version: 4.2.0
oozie_build: "*"

# HTTPFS
httpfs_enabled: False
httpfs_version: 1.0
httpfs_build: "*"

# Hue
hue_enabled: False
hue_version: 3.9.0
hue_build: "*"

# Apache Kafka
kafka_enabled: False
kafka_version: "0.9.0.0"

# ec2_regions is a dictionary with some fairly self-explanatory variables.
# Be sure to change the security groups, vpc-subnet and image. Image should
# not need changing unless you are changing the region.

ec2_regions:
  east-1a:
    region: us-east-1
    zone: us-east-1a
    keypair: vgonzalez_keypair
    # How many nodes to request per region.
    cluster_node_type: m4.4xlarge
    cluster_node_count: 4
    # If the node_price variables are set, ansible will request a spot instance.
    cluster_node_price:
    cluster_node_volumes:
      - device_name: /dev/xvdb
        delete_on_termination: True
        volume_size: 50
      - device_name: /dev/xvdf
        delete_on_termination: True
        volume_size: 500
        volume_type: st1
      - device_name: /dev/xvdg
        delete_on_termination: True
        volume_size: 500
        volume_type: st1
    edge_node_type: m4.xlarge
    # If the node_price variables are set, ansible will request a spot instance.
    edge_node_price:
    edge_node_count: 0
    edge_node_volumes:
      - device_name: /dev/xvdb
        volume_size: 20
        delete_on_termination: true
    # If the node_price variables are set, ansible will request a spot instance.
    spot_wait_timeout: 900
    security_group:
      - ssh-only
      - vpc-internal
    vpc_subnet: subnet-8f999ba7
    #image: ami-1ecae776 # Amazon Linux HVM, us-east-1
    #image: ami-57cd8732 # CentOS 6, us-east-1
    image: ami-6d1c2007 # Centos 7
    assign_public_ip: no
    placement_group:

# Set up your HTTP proxy, if needed.
proxy_env: { }
#proxy_env:
#  http_proxy: http://172.16.1.58:3128
#  https_proxy: http://172.16.1.58:3128

# Skip the tests, if you dare.
skip_tests: False
gpgcheck: 0

#core_top_level_dirs: []
#ecosystem_top_level_dirs: []
