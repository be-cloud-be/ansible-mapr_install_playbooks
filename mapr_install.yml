
- hosts: all
  max_fail_percentage: 0
  vars_files:
    - vars/global/main.yml
  roles:
    - mapr_accounts
    - { role: mapr_redhat_prereqs, when: ansible_os_family == 'RedHat' }
    - { role: mapr_debian_prereqs, when: ansible_os_family == 'Debian' }
    - { role: ntp }
    - mapr_external_packages
    - python_lxml

- hosts: zookeepers
  max_fail_percentage: 0
  vars_files:
    - vars/global/main.yml
  roles:
    - mapr_zookeeper

- hosts: cldb
  max_fail_percentage: 0
  vars_files:
    - vars/global/main.yml
  roles:
    - mapr_cldb

- hosts: resourcemanager
  max_fail_percentage: 0
  vars_files:
    - vars/global/main.yml
  roles:
    - { role: mapr_resourcemanager, when: yarn_enabled is defined and yarn_enabled == True }

- hosts: historyserver
  max_fail_percentage: 0
  vars_files:
    - vars/global/main.yml
  roles:
    - { role: mapr_historyserver, when: yarn_enabled is defined and yarn_enabled == True }

- hosts: nodemanager
  max_fail_percentage: 0
  vars_files:
    - vars/global/main.yml
  roles:
    - { role: mapr_nodemanager, when: yarn_enabled is defined and yarn_enabled == True }

- hosts: webserver
  vars_files:
    - vars/global/main.yml
  roles:
    - mapr_webserver

- hosts: cluster
  vars_files:
    - vars/global/main.yml
  roles:
    - mapr_nfs

- hosts: fileserver
  vars_files:
    - vars/global/main.yml
  roles:
    - mapr_fileserver

- hosts: cluster
  vars_files:
    - vars/global/main.yml
  roles:
    - { role: mapr_hbasemaster, when: hbase_enabled }
    - { role: mapr_hbaseregionserver, when: hbase_enabled }

- hosts: edge
  vars_files:
    - vars/global/main.yml
  roles:
    - mapr_client

- hosts: all
  vars_files:
    - vars/global/main.yml
  roles:
    - mapr_configuration

- hosts: zookeepers
  vars_files:
    - vars/global/main.yml
  roles:
    - mapr_zookeeper_startup

- hosts: cldb
  vars_files:
    - vars/global/main.yml
  roles:
    - mapr_cldb_startup

- hosts: cldb[0]
  sudo: yes
  sudo_user: mapr
  tasks:
    - name: set default desired replication to 1
      command: maprcli config save -values "{cldb.volumes.default.replication:1}"
      when: groups['cluster'] | length == 1

    - name: set default min replication to 1
      command: maprcli config save -values "{cldb.volumes.default.min.replication:1}"
      when: groups['cluster'] | length == 1

    - name: set replication to 1 if single node
      shell: maprcli volume list -columns volumename | grep -v volumename | awk '{print $1}' | xargs -n1 -I'{}' maprcli volume modify -name '{}' -replication 1 -minreplication 1
      when: groups['cluster'] | length == 1

- hosts: cluster
  vars_files:
    - vars/global/main.yml
  roles:
    - mapr_cluster_startup

- hosts: cluster
  vars_files:
    - vars/global/main.yml
  roles:
    - { role: mapr_license, when: license_file is defined }

- hosts: hiveserver
  vars_files:
    - vars/global/main.yml
  roles:
    - { role: mapr_hive, when: classic_enabled or yarn_enabled and hive_enabled is defined and hive_enabled == True }
    - { role: mapr_hive_test, when: classic_enabled or yarn_enabled and hive_enabled is defined and hive_enabled == True }

- hosts: cluster
  vars_files:
    - vars/global/main.yml
  roles:
    - { role: mapr_pig, when: classic_enabled or yarn_enabled and pig_enabled is defined and pig_enabled == True }

- hosts: hue
  vars_files:
    - vars/global/main.yml
  roles:
    - { role: mapr_httpfs, when: httpfs_enabled is defined and httpfs_enabled == True }

- hosts: cluster
  vars_files:
    - vars/global/main.yml
  roles:
    - { role: mapr_solr, when: solr_enabled }

- hosts: oozie
  vars_files:
    - vars/global/main.yml
  roles:
    - { role: mapr_oozie, when: classic_enabled or yarn_enabled and oozie_enabled is defined and oozie_enabled == True }

- hosts: hue
  vars_files:
    - vars/global/main.yml
  roles:
    - { role: mapr_hue, when: hue_enabled is defined and hue_enabled == True }

- hosts: cluster
  vars_files:
    - vars/global/main.yml
  roles:
    - { role: mapr_drill, when: drill_enabled is defined and drill_enabled == True }

- hosts: cluster
  sudo: yes
  vars_files:
    - vars/global/main.yml
  roles:
    - { role: user_account, user: opentsdb, uid: 2147483631, group: opentsdb, gid: 2147483631, home: /home/opentsdb, when: opentsdb_enabled is defined and opentsdb_enabled == True }

- hosts: opentsdb
  sudo: yes
  vars_files:
    - vars/global/main.yml
  roles:
    - { role: mapr_opentsdb, when: opentsdb_enabled is defined and opentsdb_enabled == True }

- hosts: cluster
  vars_files:
    - vars/global/main.yml
  roles:
    - { role: mapr_tcollector, when: opentsdb_enabled is defined and opentsdb_enabled == True }

- hosts: edge;cluster
  sudo_user: mapr
  vars_files:
    - vars/global/main.yml
  roles:
    - { role: mapr_post_install_test, when: skip_tests is defined and skip_tests == False }
